CMAKE_MINIMUM_REQUIRED(VERSION 3.1)
PROJECT(cddd)

SET(CMAKE_EXPORT_COMPILE_COMMANDS 1)

OPTION(GCC_LINK_TIME_OPTIMIZATION "Enable GCC Link Time Optimizations (LTO)" OFF)
IF( (CMAKE_BUILD_TYPE MATCHES Release) AND (GCC_LINK_TIME_OPTIMIZATION) )
   MESSAGE(STATUS "Link-Time Optimization Enabled! ${GCC_LINK_TIME_OPTIMIZATION}")
   FIND_PROGRAM(CMAKE_GCC_AR NAMES ${_CMAKE_TOOLCHAIN_PREFIX}gcc-ar${_CMAKE_TOOLCHAIN_SUFFIX} HINTS ${_CMAKE_TOOLCHAIN_LOCATION} ENV PATH)
   FIND_PROGRAM(CMAKE_GCC_NM NAMES ${_CMAKE_TOOLCHAIN_PREFIX}gcc-nm HINTS ${_CMAKE_TOOLCHAIN_LOCATION} ENV PATH)
   FIND_PROGRAM(CMAKE_GCC_RANLIB NAMES ${_CMAKE_TOOLCHAIN_PREFIX}gcc-ranlib HINTS ${_CMAKE_TOOLCHAIN_LOCATION} ENV PATH)
   IF( CMAKE_GCC_AR AND CMAKE_GCC_NM AND CMAKE_GCC_RANLIB )
      SET( CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -flto=jobserver -fno-fat-lto-objects" )
      #SET( CMAKE_AR "${CMAKE_GCC_AR}" )
      #SET( CMAKE_NM "${CMAKE_GCC_NM}" )
      #SET( CMAKE_RANLIB "${CMAKE_GCC_RANLIB}" )
   ELSE()
      MESSAGE( WARNING "GCC indicates LTO support, but binutils wrappers could not be found. Disabling LTO." )
   ENDIF()
ENDIF()

IF ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU" OR "${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
   SET(warnings "-Wall -Wextra -Werror")
   SET(cxx_standard "-std=c++1z")
   SET(c_standard "-std=c1z")
ELSEIF ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "MSVC")
   SET(warnings "/W4 /WX /EHsc")
ENDIF()

SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${cxx_standard} ${warnings}")
SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${c_standard} ${warnings}")

SET(CMAKE_MODULE_PATH "${CMAKE_MODULE_PATH} ${CMAKE_CURRENT_SOURCE_DIR}")
INCLUDE(${CMAKE_BINARY_DIR}/conanbuildinfo.cmake)
CONAN_BASIC_SETUP()

STRING(REPLACE "-std=c++11" "" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")

INCLUDE_DIRECTORIES(${CMAKE_SOURCE_DIR})

ADD_SUBDIRECTORY(utils)
ADD_SUBDIRECTORY(cqrs)

IF(BUILD_TESTS)
  ENABLE_TESTING()
  ADD_SUBDIRECTORY(tests)
  TARGET_INCLUDE_DIRECTORIES(messaging_tests PUBLIC ${CMAKE_SOURCE_DIR})
  ADD_TEST(cqrs_tests bin/cqrs_tests)
  ADD_TEST(messaging_tests bin/messaging_tests)
ENDIF()
